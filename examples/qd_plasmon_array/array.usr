C----------------------------------------------------------------------
c
c  USER SPECIFIED ROUTINES:
c
c     - boundary conditions
c     - initial conditions
c     - variable properties
c     - forcing function for fluid (f)
c     - forcing function for passive scalar (q)
c     - general purpose routine for checking errors etc.
c
c-----------------------------------------------------------------------
      subroutine useriniQ
c-----------------------------------------------------------------------
      implicit none
      include 'SIZE'
      include 'QUANT'
      include 'mpif.h'

      integer numqd,numsp
      parameter (numqd = 3)
      parameter (numsp = numqd) !For linear chain
      real g_couple(numqd,numsp)
      real omega,eV,gamma_di,gamma_pi,gamma_s,mu_s,mu_q
      real c_speed,d_per_au,eesu_per_au,eps_med,fluence,tmpint
      real debye
      integer qd(numqd),qdt(numqd),qdn(numqd)
      integer sp(numsp),spt(numqd),spn(numqd)
      integer qdt_sp(numqd,numsp),qd_spt(numqd,numsp)
      integer ierr,i,j,sp_l
      
      !Read the simple input
      eV       = 27.21140                ! energy Eh  
      debye     = 0.3934303070      

      mu_s     = 4d3*debye
      mu_q     = 1.3d1*debye

      gamma_pi = 1.9d-7/eV
      gamma_di = 2.0d-3/eV
      gamma_s  = 1.5d-1/eV

      omega    = 2.05/eV    
      
      do i=1,numqd
         do j=1,numsp
            g_couple(i,j)  = 30*1e-3/eV
         enddo
      enddo
      fluence = 0*1e-9*1e7
      pulse_omega_0 = 2.05/eV!omega

      debug         = 1
      
!     Parameters for energy spectrum

      Emax = 2.14
      Emin = 1.94
      nEh  = 100

!     Setup pulse things
      c_speed = 2.99792458d10 !cm/s
      d_per_au = 1.0d0 / 3.93430307d-1
      eesu_per_au = 5.14220652d17 / c_speed
      timeunit= 2.418884326505e-17        ! hbar/Eh(hartree) SI unit       
      eps_med     = 2.25
!      fluence     = 1.0e-9*1d7  ! nJ/cm**2
      pi          = 4.*ATAN(1.0)
      pulse_duration = 2e-14/timeunit
      timemax     = 10e-13/timeunit
      nqstep      = 5000
      pulse_t_0     = 1e-13/timeunit
      
      sp_l        = 2

      ltonq       = 2**numqd

      tmpint = 5e-1 * sqrt(5d-1 * pi/(2d0*log(2d0)/pulse_duration**2))
     $     * (1e0 + exp(-5e-1 * pulse_omega_0 ** 2 / 
     $     (2d0*log(2d0)/pulse_duration**2)))*timeunit
      energy0_pls =sqrt(4*pi*fluence/(c_speed*sqrt(eps_med)*tmpint))
      energy0_pls = energy0_pls / eesu_per_au
      

      call quantum_setup_initialize()

c      ifPulse          = .false.
      rwa              = .false.
      calc_concurrence = .true.
      

      do i=1,numqd
         call quantum_create_op(2,qd(i),qdt(i),qdn(i))
      enddo
      do i=1,numsp
         call quantum_create_op(sp_l,sp(i),spt(i),spn(i))
      enddo

      call quantum_finalize_op_csr()

      !Assuming ring, numsp=numqd
      do i=1,numqd-1 !-1 because we want a ring, so the final one needs to couple to the first
         j=i
         call quantum_combine_op_csr(qdt(i),sp(j),1,qdt_sp(i,j))
         call quantum_combine_op_csr(qd(i),spt(j),1,qd_spt(i,j)) 
         
         call quantum_add_to_ham_csr(qdt_sp(i,j),-g_couple(i,j),0)
         call quantum_add_to_ham_csr(qd_spt(i,j),-g_couple(i,j),0)
        
         j=i+1
         call quantum_combine_op_csr(qdt(i),sp(j),1,qdt_sp(i,j))
         call quantum_combine_op_csr(qd(i),spt(j),1,qd_spt(i,j))

         call quantum_add_to_ham_csr(qdt_sp(i,j),-g_couple(i,j),0)
         call quantum_add_to_ham_csr(qd_spt(i,j),-g_couple(i,j),0)

      enddo

      i=numqd
      j=numqd
      call quantum_combine_op_csr(qdt(i),sp(j),1,qdt_sp(i,j))
      call quantum_combine_op_csr(qd(i),spt(j),1,qd_spt(i,j))

      call quantum_add_to_ham_csr(qdt_sp(i,j),-g_couple(i,j),0)
      call quantum_add_to_ham_csr(qd_spt(i,j),-g_couple(i,j),0)

      j=1
      call quantum_combine_op_csr(qdt(i),sp(j),1,qdt_sp(i,j))
      call quantum_combine_op_csr(qd(i),spt(j),1,qd_spt(i,j))

      call quantum_add_to_ham_csr(qdt_sp(i,j),-g_couple(i,j),0)
      call quantum_add_to_ham_csr(qd_spt(i,j),-g_couple(i,j),0)


      !Oscillator terms
      do i=1,numqd
         call quantum_add_to_ham_csr(qdn(i),omega,0)      
      enddo

      do i=1,numsp
         call quantum_add_to_ham_csr(spn(i),omega,0)
      enddo

      !Driving terms
      do i=1,numqd
         call quantum_add_to_ham_csr(qd(i),-mu_q,1)
         call quantum_add_to_ham_csr(qdt(i),-mu_q,1)
      enddo
      
      do i=1,numsp
         call quantum_add_to_ham_csr(sp(i),-mu_s,1)
         call quantum_add_to_ham_csr(spt(i),-mu_s,1)
      enddo

      call quantum_ham_finalize_csr()

      do i=1,numqd
         call quantum_lin_add(qd(i),qdn(i),-gamma_pi/2)
         call quantum_lin_add(qdn(i),qdn(i),-gamma_di)
      enddo

      do i=1,numsp
         call quantum_lin_add(sp(i),spn(i),-gamma_s/2)
      enddo

      call quantum_lin_finalize()

      call cem_quantum3_propagation_rk

      return
      end



c-----------------------------------------------------------------------
      subroutine usertimedep(pulse)
      implicit none
      include 'SIZE'
      include 'QUANT'
      real pulse
      real alpha

      alpha = 2 * log(2.0)/ (pulse_duration)**2
      if(rwa.eqv..true.) then
         pulse = energy0_pls/2.0*exp(-alpha*(time-pulse_t_0)**2)
      else
         pulse = energy0_pls/2.0*exp(-alpha*(time-pulse_t_0)**2)
     $        *cos(pulse_omega_0*time)
      endif

!      if(nid.eq.1) then
!      print*,'1',time*timeunit,pulse
 !     print*,'2',eps_med,c_speed,eesu_per_au,timeunit,pi,time

!      endif
      return
      end

c-----------------------------------------------------------------------
      subroutine userchk
      include 'SIZE'
      include 'QUANT'


c ... compute errors


      if (iqstep.le.10.or.mod(iqstep,100).eq.0) then

c$$$        cpu_t1  = glsum(qrtime1,1)/(np*iqstep) ! total cpu/(np*iqstep)
c$$$        cpu_t2  = glsum(qrtime2,1)/(np*iqstep) ! hamiltonian/(np*iqstep)
c$$$        cpu_t3  = glsum(qrtime3,1)/(np*iqstep) ! linblad/(np*iqstep)
c$$$        cpu_t4  = glsum(qrtime4,1)/(np) ! fourier/(np)
c$$$
c$$$        comm_t1 = glsum(qctime1,1)/(np*iqstep) ! total gs_op/(np*iqstep)
c$$$        comm_t3 = glsum(qctime3,1)/(np*iqstep) ! total get  /(np*iqstep)

        if (nid.eq.0) then

        if(iqstep.eq.1) write(6,*)'iqstep nstate
     $gs_op get total ham lin fourier gs_op get total ham lin fourier'
         write(6,91) iqstep,nstate, 
     $               qctime1,qctime3,
     $               qrtime1,qrtime2, qrtime3, qrtime4,
     $               comm_t1,comm_t3,              
     $               cpu_t1,cpu_t2,cpu_t3,cpu_t4              

 91      format(/,i10,i10,12e10.3,' CPU: L2  '  )

        endif ! nid=0
      endif

      return
      end

c-----------------------------------------------------------------------
      subroutine userchk_acc
      include 'SIZE'
      include 'QUANT'


c ... compute errors


      if (iqstep.le.10.or.mod(iqstep,100).eq.0) then

c$$$        cpu_t1  = glsum(qrtime1,1)/(np*iqstep) ! total cpu/(np*iqstep)
c$$$        cpu_t2  = glsum(qrtime2,1)/(np*iqstep) ! hamiltonian/(np*iqstep)
c$$$        cpu_t3  = glsum(qrtime3,1)/(np*iqstep) ! linblad/(np*iqstep)
c$$$        cpu_t4  = glsum(qrtime4,1)/(np) ! fourier/(np)
c$$$
c$$$        comm_t1 = glsum(qctime1,1)/(np*iqstep) ! total gs_op/(np*iqstep)
c$$$        comm_t3 = glsum(qctime3,1)/(np*iqstep) ! total get  /(np*iqstep)

        if (nid.eq.0) then

        if(iqstep.eq.1) write(6,*)'iqstep level numqd numsp nstate
     $gs_op get total ham lin fourier gs_op get total ham lin fourier'
         write(6,91) iqstep, level,numqd,numsp,nstate, 
     $               qctime1,qctime3,
     $               qrtime1,qrtime2, qrtime3, qrtime4,
     $               comm_t1,comm_t3,    
     $               cpu_t1,cpu_t2,cpu_t3,cpu_t4    

 91      format(/,i10,3i7,i10,12e10.3,' CPU: L2  '  )

        endif ! nid=0
      endif

      return
      end 

c-----------------------------------------------------------------------
